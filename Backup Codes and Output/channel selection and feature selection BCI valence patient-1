{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"channel selection and feature selection BCI valence patient-1","provenance":[{"file_id":"1WnPcs4NNJw4G-Y5noJs_bYmCH-8NUS99","timestamp":1637691539598},{"file_id":"1_aNd9W_ox0bPqI3ULdUB0VDEOOAvN__A","timestamp":1637169672125}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"q7tNC6EX54Fm"},"source":["#**1. Data Preprocessing**#"]},{"cell_type":"code","metadata":{"id":"q5UDY40xrsZF","executionInfo":{"status":"ok","timestamp":1638515343212,"user_tz":-330,"elapsed":454,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["import pandas as pd\n","import numpy as np\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.feature_selection import chi2\n","from sklearn.feature_selection import SelectKBest, SelectPercentile\n","import warnings\n","warnings.filterwarnings(\"ignore\")"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Azg9wbOhz1XJ","executionInfo":{"status":"ok","timestamp":1638515437767,"user_tz":-330,"elapsed":21370,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"a4c155fe-916b-4483-cdc4-b7a808496d4f"},"source":["from google.colab import drive\n","import pickle  \n","drive._mount('/content/drive')\n","drive.mount('/content/drive', force_remount=True)"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"XpDYOiyPQ28F","executionInfo":{"status":"ok","timestamp":1638515440894,"user_tz":-330,"elapsed":3134,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["with open('/content/drive/MyDrive/Deap/s01.dat', 'rb') as f:\n"," raw_data = pickle.load(f, encoding='latin1')"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Smqczw7Rtm8k","executionInfo":{"status":"ok","timestamp":1638515468112,"user_tz":-330,"elapsed":4198,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"f29f3a54-645b-43c2-fe9b-3991bc8ee622"},"source":["pip install skfeature-chappers"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting skfeature-chappers\n","  Downloading skfeature_chappers-1.1.0-py3-none-any.whl (66 kB)\n","\u001b[?25l\r\u001b[K     |█████                           | 10 kB 21.4 MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 20 kB 26.8 MB/s eta 0:00:01\r\u001b[K     |██████████████▉                 | 30 kB 29.5 MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 40 kB 30.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 51 kB 31.8 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 61 kB 34.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 66 kB 4.4 MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from skfeature-chappers) (1.19.5)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from skfeature-chappers) (1.1.5)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from skfeature-chappers) (1.0.1)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->skfeature-chappers) (2.8.2)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->skfeature-chappers) (2018.9)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->skfeature-chappers) (1.15.0)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->skfeature-chappers) (1.4.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->skfeature-chappers) (3.0.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->skfeature-chappers) (1.1.0)\n","Installing collected packages: skfeature-chappers\n","Successfully installed skfeature-chappers-1.1.0\n"]}]},{"cell_type":"code","metadata":{"id":"kxJTyBtEeqHy","executionInfo":{"status":"ok","timestamp":1638515471528,"user_tz":-330,"elapsed":550,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["import numpy as np\n","from skfeature.utility.construct_W import construct_W\n","from scipy.sparse import diags\n","\n","def fisher_score(X, y):\n","    \"\"\"\n","    This function implements the fisher score feature selection, steps are as follows:\n","    1. Construct the affinity matrix W in fisher score way\n","    2. For the r-th feature, we define fr = X(:,r), D = diag(W*ones), ones = [1,...,1]', L = D - W\n","    3. Let fr_hat = fr - (fr'*D*ones)*ones/(ones'*D*ones)\n","    4. Fisher score for the r-th feature is score = (fr_hat'*D*fr_hat)/(fr_hat'*L*fr_hat)-1\n","    Input\n","    -----\n","    X: {numpy array}, shape (n_samples, n_features)\n","        input data\n","    y: {numpy array}, shape (n_samples,)\n","        input class labels\n","    Output\n","    ------\n","    score: {numpy array}, shape (n_features,)\n","        fisher score for each feature\n","    Reference\n","    ---------\n","    He, Xiaofei et al. \"Laplacian Score for Feature Selection.\" NIPS 2005.\n","    Duda, Richard et al. \"Pattern classification.\" John Wiley & Sons, 2012.\n","    \"\"\"\n","\n","    # Construct weight matrix W in a fisherScore way\n","    kwargs = {\"neighbor_mode\": \"supervised\", \"fisher_score\": True, 'y': y}\n","    W = construct_W(X, **kwargs)\n","\n","    # build the diagonal D matrix from affinity matrix W\n","    D = np.array(W.sum(axis=1))\n","    L = W\n","    tmp = np.dot(np.transpose(D), X)\n","    D = diags(np.transpose(D), [0])\n","    Xt = np.transpose(X)\n","    t1 = np.transpose(np.dot(Xt, D.todense()))\n","    t2 = np.transpose(np.dot(Xt, L.todense()))\n","    # compute the numerator of Lr\n","    D_prime = np.sum(np.multiply(t1, X), 0) - np.multiply(tmp, tmp)/D.sum()\n","    # compute the denominator of Lr\n","    L_prime = np.sum(np.multiply(t2, X), 0) - np.multiply(tmp, tmp)/D.sum()\n","    # avoid the denominator of Lr to be 0\n","    D_prime[D_prime < 1e-12] = 10000\n","    lap_score = 1 - np.array(np.multiply(L_prime, 1/D_prime))[0, :]\n","\n","    # compute fisher score from laplacian score, where fisher_score = 1/lap_score - 1\n","    score = 1.0/lap_score - 1\n","    return np.transpose(score)\n","\n","\n","def feature_ranking(score):\n","    \"\"\"\n","    Rank features in descending order according to fisher score, the larger the fisher score, the more important the\n","    feature is\n","    \"\"\"\n","    idx = np.argsort(score, 0)\n","    return idx[::-1]"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EpI-gFzRjgGT","executionInfo":{"status":"ok","timestamp":1638515485676,"user_tz":-330,"elapsed":430,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"086d73af-b98b-4efb-c913-7ad484756576"},"source":["data = raw_data['data']\n","labels = raw_data['labels']\n","\n","print(\"Labels: \", labels.shape) # trial x label\n","print(\"Data: \", data.shape) # trial x channel x data"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Labels:  (40, 4)\n","Data:  (40, 40, 8064)\n"]}]},{"cell_type":"code","metadata":{"id":"FTfibgB5c63Y","executionInfo":{"status":"ok","timestamp":1638515490024,"user_tz":-330,"elapsed":454,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["\"\"\"\n","em_labels = []\n","for i in range(0, labels.shape[0]):\n","\tif (labels[i][0]>5): #high valence\n","\t\tif(labels[i][1]>5): # high arousal\n","\t\t\tem_labels.append(1) # HVHA\n","\t\telse:\n","\t\t\tem_labels.append(0) # HVLA\n","\telse: # low valence\n","\t\tif(labels[i][1]>5): # high arousal\n","\t\t\tem_labels.append(2) #LVHA\n","\t\telse:\n","\t\t\tem_labels.append(3) # LVLA\n","\"\"\"\n","em_labels = []\n","for i in range(0, labels.shape[0]):\n","\tif (labels[i][0]>5): #high valence\n","\t\t\tem_labels.append(0) # HVHA\n","\telse: # low valence\n","\t\t\tem_labels.append(1)"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3jCP0SMBc9iu","executionInfo":{"status":"ok","timestamp":1638515494823,"user_tz":-330,"elapsed":19,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"109562a6-ce37-4890-9cc8-0497a8c4d68b"},"source":["print(em_labels)"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]\n"]}]},{"cell_type":"markdown","metadata":{"id":"eQlRP4LrOMlk"},"source":["# Fisher's Score for Theta Band"]},{"cell_type":"code","metadata":{"id":"Na1SqsWbr2y1","executionInfo":{"status":"ok","timestamp":1638515531809,"user_tz":-330,"elapsed":568,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["# load dataset\n","data_theta = pd.read_csv('/content/drive/MyDrive/1df_theta.csv')\n","# features from all the channels from the theta band only\n","data_theta.shape\n","data_theta['videos'] = em_labels\n","data_theta['videos'].unique()\n","X = data_theta[['Fp1',\t'AF3',\t'F3',\t'F7',\t'FC5',\t'FC1',\t'C3',\t'T7',\t'CP5',\t'CP1',\t'P3',\t'P7',\t'PO3',\t'O1',\t'Oz',\t'Pz',\t'Fp2',\t'AF4',\t'Fz',\t'F4',\t'F8',\t'FC6',\t'FC2',\t'Cz',\t'C4',\t'T8',\t'CP6',\t'CP2',\t'P4',\t'P8',\t'PO4',\t'O2']]\n","# taking only first 32 channels (EEG signals)\n","y = data_theta['videos']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n","X_train = np.array(X_train)\n","y_train = np.array(y_train)\n","f_score_theta = fisher_score(X_train, y_train)"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6jeXnumcG2JB"},"source":["# Fisher Score for Alpha Band"]},{"cell_type":"code","metadata":{"id":"C7fJ9fMdGVbQ","executionInfo":{"status":"ok","timestamp":1638515539167,"user_tz":-330,"elapsed":403,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["# load dataset\n","data_alpha = pd.read_csv('/content/drive/MyDrive/2df_alpha.csv')\n","# features from all the channels from the theta band only\n","data_alpha.shape\n","data_alpha['videos'] = em_labels\n","data_alpha['videos'].unique()\n","X = data_alpha[['Fp1',\t'AF3',\t'F3',\t'F7',\t'FC5',\t'FC1',\t'C3',\t'T7',\t'CP5',\t'CP1',\t'P3',\t'P7',\t'PO3',\t'O1',\t'Oz',\t'Pz',\t'Fp2',\t'AF4',\t'Fz',\t'F4',\t'F8',\t'FC6',\t'FC2',\t'Cz',\t'C4',\t'T8',\t'CP6',\t'CP2',\t'P4',\t'P8',\t'PO4',\t'O2']]\n","# taking only first 32 channels (EEG signals)\n","y = data_alpha['videos']\n","y.head()\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n","X_train = np.array(X_train)\n","y_train = np.array(y_train)\n","f_score_alpha = fisher_score(X_train, y_train)"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Np4pvMpaWAhN"},"source":["# Fisher Score for Beta Band"]},{"cell_type":"code","metadata":{"id":"9LA2tAAslnGK","executionInfo":{"status":"ok","timestamp":1638515541781,"user_tz":-330,"elapsed":10,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["# load dataset\n","data_beta = pd.read_csv('/content/drive/MyDrive/3df_beta.csv')\n","# features from all the channels from the theta band only\n","data_beta.shape\n","data_beta['videos'] = em_labels\n","data_beta['videos'].unique()\n","X = data_beta[['Fp1',\t'AF3',\t'F3',\t'F7',\t'FC5',\t'FC1',\t'C3',\t'T7',\t'CP5',\t'CP1',\t'P3',\t'P7',\t'PO3',\t'O1',\t'Oz',\t'Pz',\t'Fp2',\t'AF4',\t'Fz',\t'F4',\t'F8',\t'FC6',\t'FC2',\t'Cz',\t'C4',\t'T8',\t'CP6',\t'CP2',\t'P4',\t'P8',\t'PO4',\t'O2']]\n","# taking only first 32 channels (EEG signals)\n","y = data_beta['videos']\n","X_train = np.array(X_train)\n","y_train = np.array(y_train)\n","f_score_beta = fisher_score(X_train, y_train)"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uxn9t3hDWEBw"},"source":["# Fisher Score for Gamma Band"]},{"cell_type":"code","metadata":{"id":"7Q0uOFsDWEBx","executionInfo":{"status":"ok","timestamp":1638515545570,"user_tz":-330,"elapsed":394,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["# load dataset\n","data_gamma = pd.read_csv('/content/drive/MyDrive/4df_gamma.csv')\n","# features from all the channels from the theta band only\n","data_gamma.shape\n","data_gamma['videos'] = em_labels\n","data_gamma['videos'].unique()\n","X = data_gamma[['Fp1',\t'AF3',\t'F3',\t'F7',\t'FC5',\t'FC1',\t'C3',\t'T7',\t'CP5',\t'CP1',\t'P3',\t'P7',\t'PO3',\t'O1',\t'Oz',\t'Pz',\t'Fp2',\t'AF4',\t'Fz',\t'F4',\t'F8',\t'FC6',\t'FC2',\t'Cz',\t'C4',\t'T8',\t'CP6',\t'CP2',\t'P4',\t'P8',\t'PO4',\t'O2']]\n","# taking only first 32 channels (EEG signals)\n","y = data_gamma['videos']\n","y.head()\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n","X_train = np.array(X_train)\n","y_train = np.array(y_train)\n","f_score_gamma = fisher_score(X_train, y_train)"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sUoClL1YB5aW"},"source":["# Total Avearge F-Score(Theta,Alpha,Beta,Gamma)"]},{"cell_type":"code","metadata":{"id":"LCtwrlPCB5C1","executionInfo":{"status":"ok","timestamp":1638515549520,"user_tz":-330,"elapsed":414,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["final_f_score = (f_score_theta + f_score_alpha + f_score_beta + f_score_gamma)/4"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GB2MaoDXJC0O","executionInfo":{"status":"ok","timestamp":1638515550702,"user_tz":-330,"elapsed":663,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"2e17475d-5ea5-46c7-c91f-77fcfdad4b93"},"source":["fvalues = pd.Series(final_f_score)\n","X_train = pd.DataFrame(X_train)\n","fvalues.index = X.columns\n","fvalues.sort_values(ascending=False)\n","fvalues.to_csv('fscore_final.csv')\n","print(fvalues)"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Fp1    0.001774\n","AF3    0.005493\n","F3     0.003601\n","F7     0.006026\n","FC5    0.010173\n","FC1    0.007053\n","C3     0.019712\n","T7     0.020898\n","CP5    0.014118\n","CP1    0.007893\n","P3     0.007443\n","P7     0.018133\n","PO3    0.001538\n","O1     0.002034\n","Oz     0.000358\n","Pz     0.005698\n","Fp2    0.007796\n","AF4    0.016211\n","Fz     0.055144\n","F4     0.025343\n","F8     0.005955\n","FC6    0.010683\n","FC2    0.052024\n","Cz     0.002295\n","C4     0.029237\n","T8     0.017139\n","CP6    0.024783\n","CP2    0.007043\n","P4     0.013315\n","P8     0.004628\n","PO4    0.008457\n","O2     0.002314\n","dtype: float64\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":510},"id":"4JomiwHHuhE8","executionInfo":{"status":"ok","timestamp":1638515562767,"user_tz":-330,"elapsed":1327,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"72ce69b4-a6bd-42f1-a293-f00d691fa464"},"source":["fvalues.sort_values(ascending = False).plot.bar(figsize=(10,8))"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7ff1acc325d0>"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"GJHHjtp-rOo_"},"source":["# Classification"]},{"cell_type":"code","metadata":{"id":"5PhZZyG55qSM","executionInfo":{"status":"ok","timestamp":1638515568387,"user_tz":-330,"elapsed":441,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn import svm\n","from sklearn.metrics import accuracy_score"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"RyDSZVATz2Pw","executionInfo":{"status":"ok","timestamp":1638515573719,"user_tz":-330,"elapsed":472,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["all_data = pd.read_csv(\"/content/drive/MyDrive/7AllMerged.csv\")\n","data = all_data.drop('videos', axis = 1)"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"rxoQsqyl-sC-","executionInfo":{"status":"ok","timestamp":1638516068892,"user_tz":-330,"elapsed":538,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["import pandas as pd\n","from sklearn.model_selection import KFold \n","from sklearn.neural_network import MLPClassifier\n","from sklearn.metrics import accuracy_score\n","\n","#Loading the dataset\n","def svmclassifier(channel_name):\n","  channel_names = []\n","  for i in range(0, len(channel_name)):\n","    draft = channel_name[i]\n","    channel_names.append(draft + \"Alpha\")\n","    channel_names.append(draft + \"Beta\")\n","    channel_names.append(draft + \"Gamma\")\n","    channel_names.append(draft + \"Theta\")\n","  x = data[channel_names]\n","  y = np.array(em_labels)\n","\n","  # Implementing cross validation\n","  k = 40\n","  kf = KFold(n_splits = k)\n","\n","  model = svm.SVC(kernel='poly')\n","  acc_score = []\n","\n","  for train_index , test_index in kf.split(x):\n","      x_train , x_test = x.iloc[train_index,:],x.iloc[test_index,:]\n","      y_train , y_test = y[train_index] , y[test_index]\n","      model.fit(x_train, y_train)\n","      pred_values = model.predict(x_test)\n","      acc = accuracy_score(pred_values , y_test)\n","      acc_score.append(acc)\n","\n","  avg_acc_score = sum(acc_score)/k\n","  #print('accuracy of each fold - {}'.format(acc_score))\n","  print('Avg accuracy : {}'.format(avg_acc_score))"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dVWbJk9d6nXf","executionInfo":{"status":"ok","timestamp":1638516069351,"user_tz":-330,"elapsed":7,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"f6508aa5-e75f-4714-b425-b4ffe60e22df"},"source":["svmclassifier([\"Fz\"])"],"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.675\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sRWJudTJ7Gf9","executionInfo":{"status":"ok","timestamp":1638516070948,"user_tz":-330,"elapsed":498,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"b6842a40-0db7-4881-dd1d-5f90364ec00d"},"source":["svmclassifier([\"Fz\", \"AF4\"])"],"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.65\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SNPc-UdF7V3z","executionInfo":{"status":"ok","timestamp":1638516074935,"user_tz":-330,"elapsed":572,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"c0a0cd7a-bf08-4e73-fa87-4d54c6e92c5d"},"source":["svmclassifier([\"Fz\", \"AF4\", \"F7\"])"],"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.6\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p2lIplKV7pz0","executionInfo":{"status":"ok","timestamp":1638516075491,"user_tz":-330,"elapsed":11,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"14f249f5-9d52-42ce-9c21-c334526cabd7"},"source":["svmclassifier([\"Fz\", \"AF4\", \"F7\", \"Pz\"])"],"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.6\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n-zfq7Cw7qYZ","executionInfo":{"status":"ok","timestamp":1638516075941,"user_tz":-330,"elapsed":20,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"b4f4744f-b9b6-4b84-b097-c404a3ae2fba"},"source":["svmclassifier([\"Fz\", \"AF4\", \"F7\", \"Pz\", \"P8\"])"],"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.55\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hpXC6LNZ7qbz","executionInfo":{"status":"ok","timestamp":1638516076530,"user_tz":-330,"elapsed":597,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"5d712d87-f432-496f-dc63-f5377dcb8b92"},"source":["svmclassifier([\"Fz\", \"AF4\", \"F7\", \"Pz\", \"P8\", \"O2\"])"],"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.475\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1UEVteo47qd8","executionInfo":{"status":"ok","timestamp":1638516076531,"user_tz":-330,"elapsed":10,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"27964eb2-3112-4516-86bb-9ef306137c5e"},"source":["svmclassifier([\"Fz\", \"AF4\", \"F7\", \"Pz\", \"P8\", \"O2\", \"Cz\"])"],"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.625\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jSrKXnNcETa3","executionInfo":{"status":"ok","timestamp":1638516080084,"user_tz":-330,"elapsed":638,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"962f0a1d-1fa5-4e58-bb42-e9c823a39715"},"source":["svmclassifier([\"Fz\", \"AF4\", \"F7\", \"Pz\", \"P8\", \"O2\", \"Cz\", \"O1\"])"],"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.6\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4kvMwodJEW3C","executionInfo":{"status":"ok","timestamp":1638516080859,"user_tz":-330,"elapsed":779,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"cb9900d2-46ca-4805-b8c2-5f19eab41477"},"source":["svmclassifier([\"Fz\", \"AF4\", \"F7\", \"Pz\", \"P8\", \"O2\", \"Cz\", \"O1\", \"Fp1\"])"],"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.6\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uq3aoeXwEfy-","executionInfo":{"status":"ok","timestamp":1638516080860,"user_tz":-330,"elapsed":15,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"083f0d87-7248-4c72-d72b-7833c2ad5213"},"source":["svmclassifier([\"Fz\", \"AF4\", \"F7\", \"Pz\", \"P8\", \"O2\", \"Cz\", \"O1\", \"Fp1\", \"Oz\"]) # this is the optimal set that we got"],"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.6\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BhoUznNHHd2C","executionInfo":{"status":"ok","timestamp":1638516080861,"user_tz":-330,"elapsed":11,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"bf2ce478-b6ea-4845-c45c-357852b21e85"},"source":["svmclassifier([\"Fz\", \"P8\", \"Fp1\", \"Oz\"]) # this is the optimal set that we got"],"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.7\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2kuu1X14JLwG","executionInfo":{"status":"ok","timestamp":1638516081880,"user_tz":-330,"elapsed":12,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"1c02b169-505f-4459-9d04-482c12c51c8e"},"source":["svmclassifier(['P7', 'CP1', 'P3', 'Fz', 'P8', 'FC2', 'Cz'])"],"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg accuracy : 0.475\n"]}]},{"cell_type":"code","metadata":{"id":"QBVxKcBdJUjF"},"source":[""],"execution_count":null,"outputs":[]}]}