{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"channel selection and feature selection BCI valence patient-2","provenance":[{"file_id":"1lGl9GQ6qyv6j7gQh4Rc4ApNVKHgfVesm","timestamp":1637699098240},{"file_id":"1WnPcs4NNJw4G-Y5noJs_bYmCH-8NUS99","timestamp":1637696965314},{"file_id":"1_aNd9W_ox0bPqI3ULdUB0VDEOOAvN__A","timestamp":1637169672125}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"q7tNC6EX54Fm"},"source":["#**1. Data Preprocessing**#"]},{"cell_type":"code","metadata":{"id":"q5UDY40xrsZF"},"source":["import pandas as pd\n","import numpy as np\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.feature_selection import chi2\n","from sklearn.feature_selection import SelectKBest, SelectPercentile\n","import warnings\n","warnings.filterwarnings(\"ignore\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Azg9wbOhz1XJ","executionInfo":{"status":"ok","timestamp":1637699214816,"user_tz":-330,"elapsed":39740,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"8c1b624c-70f4-4100-c1cb-f72115c8f2cd"},"source":["from google.colab import drive\n","import pickle  \n","drive._mount('/content/drive')\n","drive.mount('/content/drive', force_remount=True)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"XpDYOiyPQ28F"},"source":["with open('/content/drive/MyDrive/Deap/s02.dat', 'rb') as f:\n"," raw_data = pickle.load(f, encoding='latin1')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Smqczw7Rtm8k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637699225570,"user_tz":-330,"elapsed":4910,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"2b41dfde-e028-4fd5-ca3b-5f59eb650609"},"source":["pip install skfeature-chappers"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting skfeature-chappers\n","  Downloading skfeature_chappers-1.1.0-py3-none-any.whl (66 kB)\n","\u001b[?25l\r\u001b[K     |█████                           | 10 kB 17.2 MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 20 kB 21.2 MB/s eta 0:00:01\r\u001b[K     |██████████████▉                 | 30 kB 15.9 MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 40 kB 11.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 51 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 61 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 66 kB 2.3 MB/s \n","\u001b[?25hRequirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from skfeature-chappers) (1.0.1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from skfeature-chappers) (1.1.5)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from skfeature-chappers) (1.19.5)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->skfeature-chappers) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->skfeature-chappers) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->skfeature-chappers) (1.15.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->skfeature-chappers) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->skfeature-chappers) (3.0.0)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->skfeature-chappers) (1.4.1)\n","Installing collected packages: skfeature-chappers\n","Successfully installed skfeature-chappers-1.1.0\n"]}]},{"cell_type":"code","metadata":{"id":"kxJTyBtEeqHy"},"source":["import numpy as np\n","from skfeature.utility.construct_W import construct_W\n","from scipy.sparse import diags\n","\n","def fisher_score(X, y):\n","    \"\"\"\n","    This function implements the fisher score feature selection, steps are as follows:\n","    1. Construct the affinity matrix W in fisher score way\n","    2. For the r-th feature, we define fr = X(:,r), D = diag(W*ones), ones = [1,...,1]', L = D - W\n","    3. Let fr_hat = fr - (fr'*D*ones)*ones/(ones'*D*ones)\n","    4. Fisher score for the r-th feature is score = (fr_hat'*D*fr_hat)/(fr_hat'*L*fr_hat)-1\n","    Input\n","    -----\n","    X: {numpy array}, shape (n_samples, n_features)\n","        input data\n","    y: {numpy array}, shape (n_samples,)\n","        input class labels\n","    Output\n","    ------\n","    score: {numpy array}, shape (n_features,)\n","        fisher score for each feature\n","    Reference\n","    ---------\n","    He, Xiaofei et al. \"Laplacian Score for Feature Selection.\" NIPS 2005.\n","    Duda, Richard et al. \"Pattern classification.\" John Wiley & Sons, 2012.\n","    \"\"\"\n","\n","    # Construct weight matrix W in a fisherScore way\n","    kwargs = {\"neighbor_mode\": \"supervised\", \"fisher_score\": True, 'y': y}\n","    W = construct_W(X, **kwargs)\n","\n","    # build the diagonal D matrix from affinity matrix W\n","    D = np.array(W.sum(axis=1))\n","    L = W\n","    tmp = np.dot(np.transpose(D), X)\n","    D = diags(np.transpose(D), [0])\n","    Xt = np.transpose(X)\n","    t1 = np.transpose(np.dot(Xt, D.todense()))\n","    t2 = np.transpose(np.dot(Xt, L.todense()))\n","    # compute the numerator of Lr\n","    D_prime = np.sum(np.multiply(t1, X), 0) - np.multiply(tmp, tmp)/D.sum()\n","    # compute the denominator of Lr\n","    L_prime = np.sum(np.multiply(t2, X), 0) - np.multiply(tmp, tmp)/D.sum()\n","    # avoid the denominator of Lr to be 0\n","    D_prime[D_prime < 1e-12] = 10000\n","    lap_score = 1 - np.array(np.multiply(L_prime, 1/D_prime))[0, :]\n","\n","    # compute fisher score from laplacian score, where fisher_score = 1/lap_score - 1\n","    score = 1.0/lap_score - 1\n","    return np.transpose(score)\n","\n","\n","def feature_ranking(score):\n","    \"\"\"\n","    Rank features in descending order according to fisher score, the larger the fisher score, the more important the\n","    feature is\n","    \"\"\"\n","    idx = np.argsort(score, 0)\n","    return idx[::-1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EpI-gFzRjgGT","executionInfo":{"status":"ok","timestamp":1637699280000,"user_tz":-330,"elapsed":477,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"d6c43f4a-298e-40cc-c343-e1eb57eb0f9f"},"source":["data = raw_data['data']\n","labels = raw_data['labels']\n","\n","print(\"Labels: \", labels.shape) # trial x label\n","print(\"Data: \", data.shape) # trial x channel x data"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Labels:  (40, 4)\n","Data:  (40, 40, 8064)\n"]}]},{"cell_type":"code","metadata":{"id":"FTfibgB5c63Y"},"source":["\"\"\"\n","em_labels = []\n","for i in range(0, labels.shape[0]):\n","\tif (labels[i][0]>5): #high valence\n","\t\tif(labels[i][1]>5): # high arousal\n","\t\t\tem_labels.append(1) # HVHA\n","\t\telse:\n","\t\t\tem_labels.append(0) # HVLA\n","\telse: # low valence\n","\t\tif(labels[i][1]>5): # high arousal\n","\t\t\tem_labels.append(2) #LVHA\n","\t\telse:\n","\t\t\tem_labels.append(3) # LVLA\n","\"\"\"\n","em_labels = []\n","for i in range(0, labels.shape[0]):\n","\tif (labels[i][0]>5): #high arousal\n","\t\t\tem_labels.append(0) # HVHA\n","\telse: # low arousal\n","\t\t\tem_labels.append(1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3jCP0SMBc9iu","executionInfo":{"status":"ok","timestamp":1637699286909,"user_tz":-330,"elapsed":6,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"87ba3c33-9b87-4ed4-8c0b-a0074e53f437"},"source":["print(em_labels)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0]\n"]}]},{"cell_type":"markdown","metadata":{"id":"eQlRP4LrOMlk"},"source":["# Fisher's Score for Theta Band"]},{"cell_type":"code","metadata":{"id":"Na1SqsWbr2y1"},"source":["# load dataset\n","data_theta = pd.read_csv('/content/drive/MyDrive/s02_theta.csv')\n","# features from all the channels from the theta band only\n","data_theta.shape\n","data_theta['videos'] = em_labels\n","data_theta['videos'].unique()\n","draft = ['Fp1',\t'AF3',\t'F3',\t'F7',\t'FC5',\t'FC1',\t'C3',\t'T7',\t'CP5',\t'CP1',\t'P3',\t'P7',\t'PO3',\t'O1',\t'Oz',\t'Pz',\t'Fp2',\t'AF4',\\\n","         'Fz',\t'F4',\t'F8',\t'FC6',\t'FC2',\t'Cz',\t'C4',\t'T8',\t'CP6',\t'CP2',\t'P4',\t'P8',\t'PO4',\t'O2']\n","col_names = []\n","for i in range(0, len(draft)):\n","    col_names.append(str(draft[i]) + \"Theta\")\n","X = data_theta[col_names]  # taking only first 32 channels (EEG signals)\n","y = data_theta['videos']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n","X_train = np.array(X_train)\n","y_train = np.array(y_train)\n","f_score_theta = fisher_score(X_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6jeXnumcG2JB"},"source":["# Fisher Score for Alpha Band"]},{"cell_type":"code","metadata":{"id":"C7fJ9fMdGVbQ"},"source":["# load dataset\n","data_alpha = pd.read_csv('/content/drive/MyDrive/s02_alpha.csv')\n","# features from all the channels from the theta band only\n","data_alpha.shape\n","data_alpha['videos'] = em_labels\n","data_alpha['videos'].unique()\n","draft = ['Fp1',\t'AF3',\t'F3',\t'F7',\t'FC5',\t'FC1',\t'C3',\t'T7',\t'CP5',\t'CP1',\t'P3',\t'P7',\t'PO3',\t'O1',\t'Oz',\t'Pz',\t'Fp2',\t'AF4', 'Fz',\t'F4',\t'F8',\t'FC6',\t'FC2',\t'Cz',\t'C4',\t'T8',\t'CP6',\t'CP2',\t'P4',\t'P8',\t'PO4',\t'O2']\n","col_names = []\n","for i in range(0, len(draft)):\n","    col_names.append(str(draft[i]) + \"Alpha\")\n","X = data_alpha[col_names]  # taking only first 32 channels (EEG signals)\n","y = data_alpha['videos']\n","y.head()\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n","X_train = np.array(X_train)\n","y_train = np.array(y_train)\n","f_score_alpha = fisher_score(X_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Np4pvMpaWAhN"},"source":["# Fisher Score for Beta Band"]},{"cell_type":"code","metadata":{"id":"9LA2tAAslnGK"},"source":["# load dataset\n","data_beta = pd.read_csv('/content/drive/MyDrive/s02_beta.csv')\n","# features from all the channels from the theta band only\n","data_beta.shape\n","data_beta['videos'] = em_labels\n","data_beta['videos'].unique()\n","draft = ['Fp1',\t'AF3',\t'F3',\t'F7',\t'FC5',\t'FC1',\t'C3',\t'T7',\t'CP5',\t'CP1',\t'P3',\t'P7',\t'PO3',\t'O1',\t'Oz',\t'Pz',\t'Fp2',\t'AF4', 'Fz',\t'F4',\t'F8',\t'FC6',\t'FC2',\t'Cz',\t'C4',\t'T8',\t'CP6',\t'CP2',\t'P4',\t'P8',\t'PO4',\t'O2']\n","col_names = []\n","for i in range(0, len(draft)):\n","    col_names.append(str(draft[i]) + \"Beta\")\n","X = data_beta[col_names]  # taking only first 32 channels (EEG signals)\n","y = data_beta['videos']\n","X_train = np.array(X_train)\n","y_train = np.array(y_train)\n","f_score_beta = fisher_score(X_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uxn9t3hDWEBw"},"source":["# Fisher Score for Gamma Band"]},{"cell_type":"code","metadata":{"id":"7Q0uOFsDWEBx"},"source":["# load dataset\n","data_gamma = pd.read_csv('/content/drive/MyDrive/s02_gamma.csv')\n","# features from all the channels from the theta band only\n","data_gamma.shape\n","data_gamma['videos'] = em_labels\n","data_gamma['videos'].unique()\n","draft = ['Fp1',\t'AF3',\t'F3',\t'F7',\t'FC5',\t'FC1',\t'C3',\t'T7',\t'CP5',\t'CP1',\t'P3',\t'P7',\t'PO3',\t'O1',\t'Oz',\t'Pz',\t'Fp2',\t'AF4', 'Fz',\t'F4',\t'F8',\t'FC6',\t'FC2',\t'Cz',\t'C4',\t'T8',\t'CP6',\t'CP2',\t'P4',\t'P8',\t'PO4',\t'O2']\n","col_names = []\n","for i in range(0, len(draft)):\n","    col_names.append(str(draft[i]) + \"Gamma\")\n","X = data_gamma[col_names]  # taking only first 32 channels (EEG signals)\n","y = data_gamma['videos']\n","y.head()\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n","X_train = np.array(X_train)\n","y_train = np.array(y_train)\n","f_score_gamma = fisher_score(X_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sUoClL1YB5aW"},"source":["# Total Avearge F-Score(Theta,Alpha,Beta,Gamma)"]},{"cell_type":"code","metadata":{"id":"LCtwrlPCB5C1"},"source":["final_f_score = (f_score_theta + f_score_alpha + f_score_beta + f_score_gamma)/4"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GB2MaoDXJC0O","executionInfo":{"status":"ok","timestamp":1637699328194,"user_tz":-330,"elapsed":12,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"096cde6e-8d3a-4846-f405-b13e51310681"},"source":["fvalues = pd.Series(final_f_score)\n","X_train = pd.DataFrame(X_train)\n","fvalues.index = draft\n","fvalues.sort_values(ascending=False)\n","fvalues.to_csv('fscore_final.csv')\n","print(fvalues)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fp1    0.128081\n","AF3    0.156013\n","F3     0.042170\n","F7     0.149088\n","FC5    0.108277\n","FC1    0.029374\n","C3     0.135262\n","T7     0.154124\n","CP5    0.138660\n","CP1    0.141514\n","P3     0.097959\n","P7     0.143849\n","PO3    0.022401\n","O1     0.146087\n","Oz     0.047853\n","Pz     0.015804\n","Fp2    0.065429\n","AF4    0.143989\n","Fz     0.143525\n","F4     0.152731\n","F8     0.130161\n","FC6    0.143584\n","FC2    0.131433\n","Cz     0.073557\n","C4     0.117939\n","T8     0.066409\n","CP6    0.075535\n","CP2    0.130428\n","P4     0.136227\n","P8     0.046990\n","PO4    0.121876\n","O2     0.115927\n","dtype: float64\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":510},"id":"4JomiwHHuhE8","executionInfo":{"status":"ok","timestamp":1637699331256,"user_tz":-330,"elapsed":815,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"02458d43-8146-4c0a-cbfc-0449ba71b0a7"},"source":["fvalues.sort_values(ascending = False).plot.bar(figsize=(10,8))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7ff7798e9390>"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 720x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YcRGYFMDf1RO","executionInfo":{"status":"ok","timestamp":1637700313247,"user_tz":-330,"elapsed":440,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"d639fe28-1807-40b4-c1d6-f6e29d5db745"},"source":["shyam = fvalues.sort_values(ascending = False)\n","da = pd.DataFrame(shyam)\n","da.to_csv(\"channel_rank.csv\")\n","cr = pd.read_csv(\"channel_rank.csv\")\n","list(cr[\"Unnamed: 0\"])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['AF3',\n"," 'T7',\n"," 'F4',\n"," 'F7',\n"," 'O1',\n"," 'AF4',\n"," 'P7',\n"," 'FC6',\n"," 'Fz',\n"," 'CP1',\n"," 'CP5',\n"," 'P4',\n"," 'C3',\n"," 'FC2',\n"," 'CP2',\n"," 'F8',\n"," 'Fp1',\n"," 'PO4',\n"," 'C4',\n"," 'O2',\n"," 'FC5',\n"," 'P3',\n"," 'CP6',\n"," 'Cz',\n"," 'T8',\n"," 'Fp2',\n"," 'Oz',\n"," 'P8',\n"," 'F3',\n"," 'FC1',\n"," 'PO3',\n"," 'Pz']"]},"metadata":{},"execution_count":58}]},{"cell_type":"markdown","metadata":{"id":"GJHHjtp-rOo_"},"source":["# Classification"]},{"cell_type":"code","metadata":{"id":"5PhZZyG55qSM"},"source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn import svm\n","from sklearn.metrics import accuracy_score"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RyDSZVATz2Pw"},"source":["all_data = pd.read_csv(\"/content/drive/MyDrive/s02.csv\")\n","data = all_data.drop('video', axis = 1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rxoQsqyl-sC-"},"source":["import pandas as pd\n","from sklearn.model_selection import KFold \n","from sklearn.neural_network import MLPClassifier\n","from sklearn.metrics import accuracy_score\n","\n","#Loading the dataset\n","def svmclassifier(channel_name):\n","  channel_names = []\n","  for i in range(0, len(channel_name)):\n","    draft = channel_name[i]\n","    channel_names.append(draft + \"Alpha\")\n","    channel_names.append(draft + \"Beta\")\n","    channel_names.append(draft + \"Gamma\")\n","    channel_names.append(draft + \"Theta\")\n","  x = data[channel_names]\n","  y = np.array(em_labels)\n","  print(channel_names)\n","\n","  # Implementing cross validation\n","  k = 10\n","  kf = KFold(n_splits = k)\n","\n","  model = svm.SVC(kernel='poly')\n","  acc_score = []\n","\n","  for train_index , test_index in kf.split(x):\n","      x_train , x_test = x.iloc[train_index,:],x.iloc[test_index,:]\n","      y_train , y_test = y[train_index] , y[test_index]\n","      model.fit(x_train, y_train)\n","      pred_values = model.predict(x_test)\n","      acc = accuracy_score(pred_values , y_test)\n","      acc_score.append(acc)\n","\n","  avg_acc_score = sum(acc_score)/k\n","  #print('accuracy of each fold - {}'.format(acc_score))\n","  print('Avg accuracy : {}'.format(avg_acc_score))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UX-FrjBCd-uw"},"source":["name = ['AF3', 'T7', 'F4', 'F7', 'O1', 'AF4', 'P7', 'FC6','Fz', 'CP1', 'CP5', 'P4', 'C3', 'FC2', 'CP2', 'F8', 'Fp1', 'PO4', 'C4','O2', 'FC5', 'P3', 'CP6','Cz','T8','Fp2','Oz','P8','F3','FC1','PO3','Pz']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nGlNqUF6jjX2","executionInfo":{"status":"ok","timestamp":1637700793302,"user_tz":-330,"elapsed":450,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"5366010c-3eaf-431a-cdf5-7c8d5f584ce0"},"source":["name = ['P3', 'CP6','Cz','T8','Fp2','Oz','P8','F3','FC1','PO3','Pz']\n","svmclassifier(name)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['P3Alpha', 'P3Beta', 'P3Gamma', 'P3Theta', 'CP6Alpha', 'CP6Beta', 'CP6Gamma', 'CP6Theta', 'CzAlpha', 'CzBeta', 'CzGamma', 'CzTheta', 'T8Alpha', 'T8Beta', 'T8Gamma', 'T8Theta', 'Fp2Alpha', 'Fp2Beta', 'Fp2Gamma', 'Fp2Theta', 'OzAlpha', 'OzBeta', 'OzGamma', 'OzTheta', 'P8Alpha', 'P8Beta', 'P8Gamma', 'P8Theta', 'F3Alpha', 'F3Beta', 'F3Gamma', 'F3Theta', 'FC1Alpha', 'FC1Beta', 'FC1Gamma', 'FC1Theta', 'PO3Alpha', 'PO3Beta', 'PO3Gamma', 'PO3Theta', 'PzAlpha', 'PzBeta', 'PzGamma', 'PzTheta']\n","Avg accuracy : 0.3\n"]}]},{"cell_type":"code","metadata":{"id":"_aohpjHLjdTv"},"source":[""],"execution_count":null,"outputs":[]}]}