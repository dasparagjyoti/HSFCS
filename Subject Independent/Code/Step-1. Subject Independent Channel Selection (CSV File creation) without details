{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Step:1-- Subject Independent Channel Selection (CSV File creation) without details","provenance":[{"file_id":"1CjDHYcPa2wfYjdtlnzd_sU2166e7yk9t","timestamp":1640771607811},{"file_id":"1Oq_KNSUgTdGEgY3QlUewpCOjzUxlBQQI","timestamp":1638476734009},{"file_id":"1_aNd9W_ox0bPqI3ULdUB0VDEOOAvN__A","timestamp":1637694566869}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Azg9wbOhz1XJ","executionInfo":{"status":"ok","timestamp":1640772722146,"user_tz":-330,"elapsed":408,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"f8fed58f-0f65-4002-e51d-baea80ebe292"},"source":["from google.colab import drive  \n","drive._mount('/content/drive')\n","!ls /content/drive/MyDrive/Deap"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","s01.dat  s05.dat  s09.dat  s13.dat  s17.dat  s21.dat  s25.dat  s29.dat\n","s02.dat  s06.dat  s10.dat  s14.dat  s18.dat  s22.dat  s26.dat  s30.dat\n","s03.dat  s07.dat  s11.dat  s15.dat  s19.dat  s23.dat  s27.dat  s31.dat\n","s04.dat  s08.dat  s12.dat  s16.dat  s20.dat  s24.dat  s28.dat  s32.dat\n"]}]},{"cell_type":"code","metadata":{"id":"CYrTggoIbl42","executionInfo":{"status":"ok","timestamp":1640772728417,"user_tz":-330,"elapsed":643,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["import os, time, pickle, warnings, itertools\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","from scipy import signal\n","from scipy.signal import welch, butter, lfilter, sosfilt, sosfreqz, freqz\n","from scipy.integrate import simps\n","from scipy.stats import f_oneway\n","from tqdm import tqdm\n","from sklearn.decomposition import FastICA\n","warnings.filterwarnings(\"ignore\")"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"udO6VWBziiQW","executionInfo":{"status":"ok","timestamp":1640772729210,"user_tz":-330,"elapsed":3,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["def butter_bandpass(lowcut, highcut, fs, order = 3):\n","    nyq = 0.5 * fs\n","    low = lowcut / nyq\n","    high = highcut / nyq\n","    b, a = butter(order, [low, high], btype='band', analog=False)\n","    return b, a\n","def butter_bandpass_filter(data, lowcut, highcut, fs, order = 5):\n","    b, a = butter_bandpass(lowcut, highcut, fs, order = order)\n","    y = lfilter(b, a, data)\n","    return y\n","def eye_movement_artifact(shyam): # parameter must be an 2D array like 32_channels*7860_data\n","    # Inverse that 2D array\n","    shyam = shyam.transpose()\n","    ica = FastICA()\n","    comps = ica.fit_transform(shyam)\n","    # invert the array \n","    data_after = comps.transpose()\n","    return data_after\n","def signal_pro(data):\n","    mean_value, fs, lowcut, highcut = 0, 128, 0.5, 45\n","    # do the bandpass filter\n","    for i in range(40):\n","        for j in range(32):\n","            data[i][j] = butter_bandpass_filter(data[i][j], lowcut, highcut, fs, order=5)\n","    # creating dummy variable which contains same data information \n","    error_eye =  np.zeros((40,32,7680))\n","    new_data =  np.zeros((40,32,7680))\n","    for i in range(40):\n","        for j in range(32):\n","            for k in range(7680):\n","                error_eye[i][j][k] = data[i][j][k]\n","                new_data[i][j][k] = data[i][j][k]\n","    for i in range(40):\n","        error_eye[i] = eye_movement_artifact(error_eye[i])\n","    for i in range(40):\n","        for j in range(32):\n","            mean_value = np.mean(error_eye[i][j])\n","            for k in range(7680):\n","                if(data[i][j][k] > 0.0):\n","                    # data is positive\n","                    new_data[i][j][k] = data[i][j][k] - abs(mean_value)\n","                else: # data is negative\n","                    new_data[i][j][k] = data[i][j][k] + abs(mean_value)\n","    return new_data"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"z1ZQs2q3Hnno","executionInfo":{"status":"ok","timestamp":1640772733019,"user_tz":-330,"elapsed":635,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["def bandpower(data, sf, band, window_sec=None, relative=False):\n","    band = np.asarray(band)\n","    low, high = band\n","    # Define window length\n","    if window_sec is not None:\n","        nperseg = window_sec * sf\n","    else:\n","        nperseg = (2 / low) * sf\n","    # Compute the modified periodogram (Welch)\n","    freqs, psd = welch(data, sf, nperseg=nperseg)\n","    # Frequency resolution\n","    freq_res = freqs[1] - freqs[0]\n","    # Find closest indices of band in frequency vector\n","    idx_band = np.logical_and(freqs >= low, freqs <= high)\n","    # Integral approximation of the spectrum using Simpson's rule.\n","    bp = simps(psd[idx_band], dx=freq_res)\n","    if relative:\n","        bp /= simps(psd, dx=freq_res)\n","    return bp"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"CN81MihX5ZbU","executionInfo":{"status":"ok","timestamp":1640772736277,"user_tz":-330,"elapsed":411,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["def get_band_power(trial, channel, band):\n","  bd = (0,0)\n","  if (band == \"theta\"): # drownsiness, emotional connection, intuition, creativity\n","    bd = (4,8)\n","  elif (band == \"alpha\"): # reflection, relaxation\n","    bd = (8,12)\n","  elif (band == \"beta\"): # concentration, problem solving, memory\n","    bd = (12,30)\n","  elif (band == \"gamma\"): # cognition, perception, learning, multi-tasking\n","    bd = (30,48)\n","  return bandpower(filter_data[trial,channel], 128, bd)"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"I4DEPV9z4a4q","executionInfo":{"status":"ok","timestamp":1640773030489,"user_tz":-330,"elapsed":534,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["def get_csf_file(subject, filter_data):\n","  mypath = \"/content/drive/MyDrive/Sequential methods for channel selection/our code/Subject Independent/data files/\" + subject\n","  #---------------------------------------- Theta ---------------------------------------\n","  eeg_theta = []\n","  for i in range (len(filter_data)):\n","    for j in range (len(filter_data[0])):\n","      eeg_theta.append(get_band_power(i, j, \"theta\"))\n","  eeg_theta = np.reshape(eeg_theta, (40, 32))\n","  draft = []\n","  for i in range(0, len(eeg_channels)):\n","    draft.append(eeg_channels[i] + '_theta')\n","  df_theta = pd.DataFrame(data = eeg_theta, columns = draft)\n","  df_theta.to_csv(mypath + \"_theta.csv\", index = False, encoding = 'utf-8-sig')\n","  #---------------------------------------- Alpha --------------------------------------------------\n","  eeg_alpha = []\n","  for i in range (len(filter_data)):\n","    for j in range (len(filter_data[0])):\n","      eeg_alpha.append(get_band_power(i, j,\"alpha\"))\n","  eeg_alpha = np.reshape(eeg_alpha, (40, 32))\n","  draft = []\n","  for i in range(0, len(eeg_channels)):\n","    draft.append(eeg_channels[i] + '_alpha')\n","  df_alpha = pd.DataFrame(data = eeg_alpha, columns = draft)\n","  df_alpha.to_csv(mypath + \"_alpha.csv\", index = False, encoding = 'utf-8-sig')\n","  #---------------------------------------- Beta----------------------------------------------------\n","  eeg_beta = []\n","  for i in range (len(filter_data)):\n","    for j in range (len(filter_data[0])):\n","      eeg_beta.append(get_band_power(i,j,\"beta\"))\n","  eeg_beta = np.reshape(eeg_beta, (40, 32))\n","  draft = []\n","  for i in range(0, len(eeg_channels)):\n","    draft.append(eeg_channels[i] + '_beta')\n","  df_beta = pd.DataFrame(data = eeg_beta, columns = draft)\n","  df_beta.to_csv(mypath + \"_beta.csv\", index = False, encoding = 'utf-8-sig')\n","  #---------------------------------------- Gamma-----------------------------------------------------\n","  eeg_gamma = []\n","  for i in range (len(filter_data)):\n","    for j in range (len(filter_data[0])):\n","      eeg_gamma.append(get_band_power(i,j,\"gamma\"))\n","  eeg_gamma = np.reshape(eeg_gamma, (40, 32))\n","  draft = []\n","  for i in range(0, len(eeg_channels)):\n","    draft.append(eeg_channels[i] + '_gamma')\n","  df_gamma = pd.DataFrame(data = eeg_gamma, columns = draft)\n","  df_gamma.to_csv(mypath + \"_gamma.csv\", index = False, encoding = 'utf-8-sig')\n","  #---------------------------------------- All Band -----------------------------------------------------\n","  frames = [df_theta, df_alpha, df_beta, df_gamma]\n","  all_bands = pd.concat(frames, axis = 1)\n","  all_bands.shape\n","  all_bands.to_csv(mypath + \".csv\", index = False, encoding = 'utf-8-sig')"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"lZehUFjMT-UP","executionInfo":{"status":"ok","timestamp":1640773030876,"user_tz":-330,"elapsed":8,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}}},"source":["subject_names = [\"s01\", \"s02\", \"s03\", \"s04\", \"s05\", \"s06\", \"s07\", \"s08\", \"s09\", \"s10\", \"s11\", \"s12\", \"s13\", \"s14\", \"s15\", \"s16\", \"s17\", \"s18\", \"s19\", \"s20\", \"s21\",\n","                \"s22\", \"s23\", \"s24\", \"s25\", \"s26\", \"s27\", \"s28\", \"s29\", \"s30\", \"s31\", \"s32\"]"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"00R0E0kBcd0w","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640779861300,"user_tz":-330,"elapsed":6827801,"user":{"displayName":"SHYAM MARJIT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgXWgt6yPRlb1Vc2PDp-7CmKEzAlS0XLO2cxEV=s64","userId":"10874093040693940713"}},"outputId":"91a72661-ca79-422c-df4e-034cebd22213"},"source":["for subject in subject_names:\n","  eeg_channels = np.array([\"Fp1\", \"AF3\", \"F3\", \"F7\", \"FC5\", \"FC1\", \"C3\", \"T7\", \"CP5\", \"CP1\", \"P3\", \"P7\", \"PO3\", \"O1\", \"Oz\", \"Pz\", \"Fp2\", \"AF4\", \"Fz\", \"F4\", \"F8\", \"FC6\", \"FC2\", \"Cz\", \"C4\", \"T8\", \"CP6\", \"CP2\", \"P4\", \"P8\", \"PO4\", \"O2\"])\n","  with open('/content/drive/MyDrive/Deap/' + subject + '.dat', 'rb') as f:\n","    raw_data = pickle.load(f, encoding = 'latin1')\n","  data = raw_data['data']\n","  reduced_eeg_data  = data[0:40, 0:32, 384:8064]\n","  filter_data = signal_pro(data)\n","  get_csf_file(subject, filter_data)\n","  print(\"Done: \",subject)"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Done:  s01\n","Done:  s02\n","Done:  s03\n","Done:  s04\n","Done:  s05\n","Done:  s06\n","Done:  s07\n","Done:  s08\n","Done:  s09\n","Done:  s10\n","Done:  s11\n","Done:  s12\n","Done:  s13\n","Done:  s14\n","Done:  s15\n","Done:  s16\n","Done:  s17\n","Done:  s18\n","Done:  s19\n","Done:  s20\n","Done:  s21\n","Done:  s22\n","Done:  s23\n","Done:  s24\n","Done:  s25\n","Done:  s26\n","Done:  s27\n","Done:  s28\n","Done:  s29\n","Done:  s30\n","Done:  s31\n","Done:  s32\n"]}]},{"cell_type":"code","metadata":{"id":"M1wqMXLl0u36"},"source":[""],"execution_count":null,"outputs":[]}]}